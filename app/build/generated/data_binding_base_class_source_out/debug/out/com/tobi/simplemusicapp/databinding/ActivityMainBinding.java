// Generated by view binder compiler. Do not edit!
package com.tobi.simplemusicapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.slider.Slider;
import com.tobi.simplemusicapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FloatingActionButton backButton;

  @NonNull
  public final ConstraintLayout constraintLayout4;

  @NonNull
  public final TextView currentPosText;

  @NonNull
  public final TextView durationText;

  @NonNull
  public final LinearLayout fragmentHolder;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final FloatingActionButton nextSongButton;

  @NonNull
  public final FloatingActionButton playButton;

  @NonNull
  public final FloatingActionButton prevSongButton;

  @NonNull
  public final FloatingActionButton showPlaylistButton;

  @NonNull
  public final FloatingActionButton showSongsButton;

  @NonNull
  public final Slider timelineSlider;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull FloatingActionButton backButton, @NonNull ConstraintLayout constraintLayout4,
      @NonNull TextView currentPosText, @NonNull TextView durationText,
      @NonNull LinearLayout fragmentHolder, @NonNull LinearLayout linearLayout,
      @NonNull FloatingActionButton nextSongButton, @NonNull FloatingActionButton playButton,
      @NonNull FloatingActionButton prevSongButton,
      @NonNull FloatingActionButton showPlaylistButton,
      @NonNull FloatingActionButton showSongsButton, @NonNull Slider timelineSlider) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.constraintLayout4 = constraintLayout4;
    this.currentPosText = currentPosText;
    this.durationText = durationText;
    this.fragmentHolder = fragmentHolder;
    this.linearLayout = linearLayout;
    this.nextSongButton = nextSongButton;
    this.playButton = playButton;
    this.prevSongButton = prevSongButton;
    this.showPlaylistButton = showPlaylistButton;
    this.showSongsButton = showSongsButton;
    this.timelineSlider = timelineSlider;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backButton;
      FloatingActionButton backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.constraintLayout4;
      ConstraintLayout constraintLayout4 = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout4 == null) {
        break missingId;
      }

      id = R.id.currentPosText;
      TextView currentPosText = ViewBindings.findChildViewById(rootView, id);
      if (currentPosText == null) {
        break missingId;
      }

      id = R.id.durationText;
      TextView durationText = ViewBindings.findChildViewById(rootView, id);
      if (durationText == null) {
        break missingId;
      }

      id = R.id.fragmentHolder;
      LinearLayout fragmentHolder = ViewBindings.findChildViewById(rootView, id);
      if (fragmentHolder == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.nextSongButton;
      FloatingActionButton nextSongButton = ViewBindings.findChildViewById(rootView, id);
      if (nextSongButton == null) {
        break missingId;
      }

      id = R.id.playButton;
      FloatingActionButton playButton = ViewBindings.findChildViewById(rootView, id);
      if (playButton == null) {
        break missingId;
      }

      id = R.id.prevSongButton;
      FloatingActionButton prevSongButton = ViewBindings.findChildViewById(rootView, id);
      if (prevSongButton == null) {
        break missingId;
      }

      id = R.id.showPlaylistButton;
      FloatingActionButton showPlaylistButton = ViewBindings.findChildViewById(rootView, id);
      if (showPlaylistButton == null) {
        break missingId;
      }

      id = R.id.showSongsButton;
      FloatingActionButton showSongsButton = ViewBindings.findChildViewById(rootView, id);
      if (showSongsButton == null) {
        break missingId;
      }

      id = R.id.timelineSlider;
      Slider timelineSlider = ViewBindings.findChildViewById(rootView, id);
      if (timelineSlider == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, backButton, constraintLayout4,
          currentPosText, durationText, fragmentHolder, linearLayout, nextSongButton, playButton,
          prevSongButton, showPlaylistButton, showSongsButton, timelineSlider);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
